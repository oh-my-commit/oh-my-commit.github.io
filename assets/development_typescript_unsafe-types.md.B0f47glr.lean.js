import{_ as i,c as e,a0 as t,o as a}from"./chunks/framework.P9qPzDnn.js";const k=JSON.parse('{"title":"TypeScript Unsafe Types 处理经验","description":"","frontmatter":{},"headers":[],"relativePath":"development/typescript/unsafe-types.md","filePath":"development/typescript/unsafe-types.md"}'),n={name:"development/typescript/unsafe-types.md"};function l(p,s,r,o,h,c){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="typescript-unsafe-types-处理经验" tabindex="-1">TypeScript Unsafe Types 处理经验 <a class="header-anchor" href="#typescript-unsafe-types-处理经验" aria-label="Permalink to &quot;TypeScript Unsafe Types 处理经验&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>在使用 TypeScript 的严格模式和 ESLint 的 <code>@typescript-eslint</code> 插件时，经常会遇到一系列 <code>unsafe-*</code> 相关的警告：</p><ul><li><code>@typescript-eslint/no-unsafe-assignment</code></li><li><code>@typescript-eslint/no-unsafe-member-access</code></li><li><code>@typescript-eslint/no-unsafe-return</code></li><li><code>@typescript-eslint/no-unsafe-argument</code></li></ul><p>这些警告通常出现在：</p><ol><li>使用模板字符串时</li><li>跨包引用时</li><li>使用第三方库时</li></ol><h2 id="临时解决方案" tabindex="-1">临时解决方案 <a class="header-anchor" href="#临时解决方案" aria-label="Permalink to &quot;临时解决方案&quot;">​</a></h2><p>在 <code>.eslintrc.js</code> 中关闭这些规则：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;@typescript-eslint/no-unsafe-member-access&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;@typescript-eslint/no-unsafe-assignment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;@typescript-eslint/no-unsafe-return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;@typescript-eslint/no-unsafe-argument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="待优化方向" tabindex="-1">待优化方向 <a class="header-anchor" href="#待优化方向" aria-label="Permalink to &quot;待优化方向&quot;">​</a></h2><ol><li><p>使用 TypeScript 的类型系统来更好地定义和约束类型：</p><ul><li>使用 <code>satisfies</code> 操作符</li><li>使用 const enum</li><li>定义明确的类型接口</li></ul></li><li><p>在跨包引用时确保类型定义的完整性</p></li><li><p>对第三方库添加更完善的类型定义</p></li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://typescript-eslint.io/rules/" target="_blank" rel="noreferrer">TypeScript ESLint Rules</a></li><li><a href="https://www.typescriptlang.org/tsconfig#strict" target="_blank" rel="noreferrer">TypeScript Strict Mode</a></li></ul>`,13)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
