import{_ as i,c as a,a0 as e,o as t}from"./chunks/framework.P9qPzDnn.js";const k=JSON.parse('{"title":"TypeScript 导入扩展名问题","description":"","frontmatter":{},"headers":[],"relativePath":"development/trouble-shooting/typescript-import-extensions.md","filePath":"development/trouble-shooting/typescript-import-extensions.md"}'),n={name:"development/trouble-shooting/typescript-import-extensions.md"};function p(l,s,o,h,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="typescript-导入扩展名问题" tabindex="-1">TypeScript 导入扩展名问题 <a class="header-anchor" href="#typescript-导入扩展名问题" aria-label="Permalink to &quot;TypeScript 导入扩展名问题&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>在使用 TypeScript 的项目中，VSCode 的自动导入功能会自动添加 <code>.js</code> 或 <code>.ts</code> 扩展名，例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动补全会变成这样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./module.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./module.ts&quot;</span></span></code></pre></div><p>这会导致构建错误，因为大多数构建工具（如 Vite）期望的是不带扩展名的导入路径。</p><h2 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">​</a></h2><p>这个问题通常由以下原因之一导致：</p><ol><li>VSCode 的 TypeScript 设置中启用了自动添加扩展名的功能</li><li>TypeScript 配置中的 <code>moduleResolution</code> 设置不正确</li><li>项目使用了较新版本的 TypeScript（5.0+），其默认行为发生了变化</li></ol><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="方案-1-修改-vscode-设置-推荐" tabindex="-1">方案 1：修改 VSCode 设置（推荐） <a class="header-anchor" href="#方案-1-修改-vscode-设置-推荐" aria-label="Permalink to &quot;方案 1：修改 VSCode 设置（推荐）&quot;">​</a></h3><p>在项目的 <code>.vscode/settings.json</code> 中，将 TypeScript 的导入扩展名设置改为 <code>minimal</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typescript.preferences.importModuleSpecifierEnding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;minimal&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样 VSCode 的自动导入功能就不会添加文件扩展名了。</p><h3 id="方案-2-修改-typescript-配置" tabindex="-1">方案 2：修改 TypeScript 配置 <a class="header-anchor" href="#方案-2-修改-typescript-配置" aria-label="Permalink to &quot;方案 2：修改 TypeScript 配置&quot;">​</a></h3><p>如果问题仍然存在，可以尝试在 <code>tsconfig.json</code> 中调整模块解析策略：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 &quot;bundler&quot;，取决于你的构建工具</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ESNext&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>修改这些设置后，需要重启 TypeScript 服务器才能生效</li><li>如果使用 monorepo，确保根目录和各个包的配置保持一致</li><li>某些构建工具（如 Vite）可能需要额外的配置来正确处理模块导入</li></ol><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">TypeScript 官方文档：Module Resolution</a></li><li><a href="https://code.visualstudio.com/docs/typescript/typescript-compiling#_compiler-options" target="_blank" rel="noreferrer">VSCode TypeScript 设置文档</a></li></ul>`,20)]))}const u=i(n,[["render",p]]);export{k as __pageData,u as default};
