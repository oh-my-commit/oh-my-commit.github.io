import{_ as i,c as e,a0 as s,o as t}from"./chunks/framework.P9qPzDnn.js";const k=JSON.parse('{"title":"PNPM Patch 最佳实践","description":"","frontmatter":{},"headers":[],"relativePath":"development/trouble-shooting/patch/pnpm-patch.md","filePath":"development/trouble-shooting/patch/pnpm-patch.md"}'),l={name:"development/trouble-shooting/patch/pnpm-patch.md"};function n(h,a,r,o,p,d){return t(),e("div",null,a[0]||(a[0]=[s(`<h1 id="pnpm-patch-最佳实践" tabindex="-1">PNPM Patch 最佳实践 <a class="header-anchor" href="#pnpm-patch-最佳实践" aria-label="Permalink to &quot;PNPM Patch 最佳实践&quot;">​</a></h1><p>本文档介绍如何在项目中使用 pnpm 的原生补丁功能来修改依赖包的代码。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>有时我们需要修改 node_modules 中的依赖包代码，常见的场景包括：</p><ul><li>修复依赖包的 bug</li><li>添加自定义功能</li><li>适配特定的使用场景</li></ul><p>虽然 patch-package 是一个流行的解决方案，但在 pnpm 项目中，我们推荐使用 pnpm 的原生补丁功能，因为：</p><ul><li>与 pnpm 完全集成</li><li>不需要额外的依赖</li><li>更好的维护性</li></ul><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><h3 id="_1-创建补丁" tabindex="-1">1. 创建补丁 <a class="header-anchor" href="#_1-创建补丁" aria-label="Permalink to &quot;1. 创建补丁&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建补丁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例如：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsup@8.3.5</span></span></code></pre></div><p>这会创建一个临时目录，你可以在其中修改包的代码。</p><h3 id="_2-提交补丁" tabindex="-1">2. 提交补丁 <a class="header-anchor" href="#_2-提交补丁" aria-label="Permalink to &quot;2. 提交补丁&quot;">​</a></h3><p>修改完成后，运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">patch-director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>这将：</p><ul><li>生成补丁文件到 <code>patches/</code> 目录</li><li>在 package.json 中添加补丁配置</li><li>自动应用补丁</li></ul><h3 id="_3-补丁文件格式" tabindex="-1">3. 补丁文件格式 <a class="header-anchor" href="#_3-补丁文件格式" aria-label="Permalink to &quot;3. 补丁文件格式&quot;">​</a></h3><p>补丁文件应遵循以下格式： \`\`\`diff</p><h1 id="补丁说明" tabindex="-1">补丁说明 <a class="header-anchor" href="#补丁说明" aria-label="Permalink to &quot;补丁说明&quot;">​</a></h1><h1 id="修复了什么问题" tabindex="-1">- 修复了什么问题 <a class="header-anchor" href="#修复了什么问题" aria-label="Permalink to &quot;- 修复了什么问题&quot;">​</a></h1><h1 id="如何使用" tabindex="-1">- 如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;- 如何使用&quot;">​</a></h1><h1 id="注意事项" tabindex="-1">- 注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;- 注意事项&quot;">​</a></h1><p>--- a/path/to/file.js +++ b/path/to/file.js @@ -line,count +line,count @@ // 修改的代码 \`\`\`</p><h2 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li><p><strong>代码兼容性</strong></p><ul><li>使用兼容的 JavaScript 语法</li><li>避免使用新特性（如箭头函数、扩展运算符等）</li><li>优先使用 function 关键字定义函数</li></ul></li><li><p><strong>补丁管理</strong></p><ul><li>补丁文件应放在项目根目录的 <code>patches/</code> 目录下</li><li>文件名格式：<code>&lt;package-name&gt;@&lt;version&gt;.patch</code></li><li>补丁文件应包含清晰的注释说明</li></ul></li><li><p><strong>版本控制</strong></p><ul><li>将补丁文件提交到版本控制系统</li><li>在 README 中说明已修改的依赖</li></ul></li><li><p><strong>更新补丁</strong></p><ul><li>依赖版本更新时，需要检查补丁是否仍然适用</li><li>必要时重新生成补丁</li></ul></li></ol><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="_1-补丁目录已存在" tabindex="-1">1. 补丁目录已存在 <a class="header-anchor" href="#_1-补丁目录已存在" aria-label="Permalink to &quot;1. 补丁目录已存在&quot;">​</a></h3><p>错误信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ERR_PNPM_EDIT_DIR_NOT_EMPTY The directory ... is not empty</span></span></code></pre></div><p>解决方法：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除临时补丁目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_modules/.pnpm_patches</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新应用补丁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="_2-补丁应用失败" tabindex="-1">2. 补丁应用失败 <a class="header-anchor" href="#_2-补丁应用失败" aria-label="Permalink to &quot;2. 补丁应用失败&quot;">​</a></h3><p>可能的原因：</p><ul><li>语法不兼容</li><li>路径错误</li><li>补丁文件格式问题</li></ul><p>解决方法：</p><ol><li>检查补丁文件格式</li><li>使用兼容的语法</li><li>确保文件路径正确</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>以下是一个修复 tsup 监听外部目录问题的补丁示例：</p><p>\`\`\`diff</p><h1 id="tsup-patch-for-external-directory-watch" tabindex="-1">tsup Patch for External Directory Watch <a class="header-anchor" href="#tsup-patch-for-external-directory-watch" aria-label="Permalink to &quot;tsup Patch for External Directory Watch&quot;">​</a></h1><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h1 id="这个补丁修复了-tsup-无法监听外部目录-如-dist-的问题。" tabindex="-1">这个补丁修复了 tsup 无法监听外部目录（如 <code>../../dist</code>）的问题。 <a class="header-anchor" href="#这个补丁修复了-tsup-无法监听外部目录-如-dist-的问题。" aria-label="Permalink to &quot;这个补丁修复了 tsup 无法监听外部目录（如 \`../../dist\`）的问题。&quot;">​</a></h1><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h1><h1 id="补丁说明-1" tabindex="-1">补丁说明： <a class="header-anchor" href="#补丁说明-1" aria-label="Permalink to &quot;补丁说明：&quot;">​</a></h1><h1 id="将所有路径转换为绝对路径-确保正确处理外部目录" tabindex="-1">- 将所有路径转换为绝对路径，确保正确处理外部目录 <a class="header-anchor" href="#将所有路径转换为绝对路径-确保正确处理外部目录" aria-label="Permalink to &quot;- 将所有路径转换为绝对路径，确保正确处理外部目录&quot;">​</a></h1><h1 id="在-glob-匹配时使用绝对路径" tabindex="-1">- 在 glob 匹配时使用绝对路径 <a class="header-anchor" href="#在-glob-匹配时使用绝对路径" aria-label="Permalink to &quot;- 在 glob 匹配时使用绝对路径&quot;">​</a></h1><h1 id="确保-ignore-路径也都是绝对路径" tabindex="-1">- 确保 ignore 路径也都是绝对路径 <a class="header-anchor" href="#确保-ignore-路径也都是绝对路径" aria-label="Permalink to &quot;- 确保 ignore 路径也都是绝对路径&quot;">​</a></h1><p>--- dist/index.js +++ dist/index.js @@ -1648,8 +1648,10 @@ const customIgnores = options.ignoreWatch ? Array.isArray(options.ignoreWatch) ? options.ignoreWatch : [options.ignoreWatch] : []; const ignored = [ &quot;<strong>/{.git,node_modules}/</strong>&quot;,</p><ul><li><pre><code>           options.outDir,
</code></pre></li><li><pre><code>           ...customIgnores
</code></pre></li></ul><ul><li><pre><code>           _path2.default.resolve(options.outDir),
</code></pre></li><li><pre><code>           ...customIgnores.map(function(ignore) {
</code></pre></li><li><pre><code>             return _path2.default.isAbsolute(ignore) ? ignore : _path2.default.resolve(ignore);
</code></pre></li><li><pre><code>           })
           ];
</code></pre> \`\`\`</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://pnpm.io/cli/patch" target="_blank" rel="noreferrer">PNPM Patching Packages</a></li><li><a href="https://pnpm.io/cli/patch-commit" target="_blank" rel="noreferrer">Working with Patches in PNPM</a></li></ul>`,52)]))}const u=i(l,[["render",n]]);export{k as __pageData,u as default};
